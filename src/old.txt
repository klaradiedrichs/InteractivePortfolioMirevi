Start Screen 
<group position={[-33, 0.5, 68.3]} rotation={[0, -1.05, 0]}>
            <Text scale={0.5} position={[0.45,-0.52,-0.09]} color="white" font="fonts/PlayfairDisplay-Regular.ttf" fontSize={0.1}>
                ... an immersive web exhibiton to get insights about MIREVI Projects
                <meshBasicMaterial color="white" toneMapped={false} />
            </Text>
            <Text scale={0.35} position={[0.45,-0.62,-0.09]} color="white" font="fonts/static/Montserrat-Light.ttf" fontSize={0.1}>
                Learn more about mirevi
                <meshBasicMaterial color="white" toneMapped={false} />
            </Text>
            <Text scale={0.3} position={[0.459,-0.85,-0.09]} color="white" font="fonts/static/Montserrat-Light.ttf" fontSize={0.1}>
                Scroll to start exploring
                <meshBasicMaterial color="white" toneMapped={false} />
            </Text>
            <Svg position={[0.45,-0.9,-0.09]} scale={0.001} src={svg}/>
            <mesh position={[0.39,-0.15,-0.5]} scale={[1.15,0.65,0]}>
                <planeGeometry />
                <meshBasicMaterial map={logo} opacity={0.8} transparent toneMapped={false} side={THREE.DoubleSide}/>
            </mesh>
            <RoundedBox args={[1.9, 1.3, 1]} radius={0.02} position={[0.45,-0.4,-1]}>
                <meshStandardMaterial  color="#7e7e7e" opacity={0.2} transparent />
            </RoundedBox>
        </group>



         {/* {!start && (
          <div className='absolute z-20 flex flex-col h-screen w-screen items-center justify-center'>
            <div className='text-center text-lg border border-slate-500/25 rounded-xl w-96 h-64 bg-slate-400/25 flex flex-col gap-y-8 items-center justify-center'>
              
              <p className='px-3'>
              Collect as many trash objects as possible in 30 seconds
              </p>
              <div>
                
              </div>
              <div onClick={handleStart} className='text-2xl bg-slate-500/50 rounded-lg px-3'>
                START
              </div>
            </div>
            
          </div>
          )} */}
          {/* {start && (
          <div className='absolute text-4xl z-20 bottom-3 left-3'>
            <div>
              
            </div>
            <Timer onFinish={() => console.log('Time is up!')} />
            <div className='border-2 rounded-xl px-4 '>
              SCORE: {score}
            </div>
          </div>
          )} */}



          import * as THREE from "three";

// Erstellt eine Szene
const scene = new THREE.Scene();

// Erstellt eine perspektivische Kamera
const camera = new THREE.PerspectiveCamera(
  70,
  window.innerWidth / window.innerHeight,
  0.01,
  10
);

// Bewegt die Kamera nach oben und hinten
camera.position.set(0, 5, 5);

// Rotiert die Kamera, so dass sie etwas nach unten zeigt,
// damit wir mehrere Flächen vom Würfel sehen können
camera.rotation.x = -45 * THREE.MathUtils.DEG2RAD;

// Erstellt die Würfelgeometrie
const geometry = new THREE.BoxGeometry(1, 1, 1);

// Erstellt ein einfaches Material für den Würfel
const material = new THREE.MeshPhongMaterial({ color: "rgb(10,180,180)" });

// Erstellt das eigentliche Mesh-Objekt, mit der Geometrie und dem Material
const mesh = new THREE.Mesh(geometry, material);

// Rotiert den Würfel, so dass eine Ecke in die Kamera schaut
mesh.rotation.y = 45 * THREE.MathUtils.DEG2RAD;

// Fügt den Würfel in die Szene ein
scene.add(mesh);

// Erstellt ein weißes Punktlicht
const light = new THREE.PointLight("white", 1, 100);

// Verschiebt das Licht, damit die Flächen des Würfels unterschiedlich
// beleuchtet sind
light.position.set(5, 10, 10);

// Fügt das Licht in die Szene ein
scene.add(light);

// Erstellt einen WebGL-Renderer
const renderer = new THREE.WebGLRenderer();

// Setzt die Größe auf die des Fensters
renderer.setSize(window.innerWidth, window.innerHeight);

// Fügt das canvas-Element in das Dokument ein
document.body.appendChild(renderer.domElement);

// Rendert die Scene mit der Kamera ein einziges Mal
renderer.render(scene, camera);